/* tslint:disable */
/* eslint-disable */
/**
 * phoquashApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-07-29 08:18:09UTC
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from "./configuration";
import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "./base";

/**
 *
 * @export
 * @interface CreateTravelRecordReturn
 */
export interface CreateTravelRecordReturn {
  /**
   *
   * @type {string}
   * @memberof CreateTravelRecordReturn
   */
  status: string;
  /**
   *
   * @type {string}
   * @memberof CreateTravelRecordReturn
   */
  message: string;
  /**
   *
   * @type {number}
   * @memberof CreateTravelRecordReturn
   */
  travelRecordId?: number;
}
/**
 *
 * @export
 * @interface CreateUserReturn
 */
export interface CreateUserReturn {
  /**
   *
   * @type {string}
   * @memberof CreateUserReturn
   */
  status: string;
  /**
   *
   * @type {string}
   * @memberof CreateUserReturn
   */
  message: string;
  /**
   *
   * @type {number}
   * @memberof CreateUserReturn
   */
  userId?: number;
}
/**
 *
 * @export
 * @interface DeleteTravelRecordReturn
 */
export interface DeleteTravelRecordReturn {
  /**
   *
   * @type {string}
   * @memberof DeleteTravelRecordReturn
   */
  status: string;
  /**
   *
   * @type {string}
   * @memberof DeleteTravelRecordReturn
   */
  message: string;
}
/**
 *
 * @export
 * @interface DeleteTravelReturn
 */
export interface DeleteTravelReturn {
  /**
   *
   * @type {string}
   * @memberof DeleteTravelReturn
   */
  status: string;
  /**
   *
   * @type {string}
   * @memberof DeleteTravelReturn
   */
  message: string;
}
/**
 *
 * @export
 * @interface DeleteUserReturn
 */
export interface DeleteUserReturn {
  /**
   *
   * @type {string}
   * @memberof DeleteUserReturn
   */
  status: string;
  /**
   *
   * @type {string}
   * @memberof DeleteUserReturn
   */
  message: string;
}
/**
 *
 * @export
 * @interface PhotoRequestBody
 */
export interface PhotoRequestBody {
  /**
   *
   * @type {string}
   * @memberof PhotoRequestBody
   */
  description?: string;
  /**
   *
   * @type {number}
   * @memberof PhotoRequestBody
   */
  travelRecordId: number;
  /**
   *
   * @type {string}
   * @memberof PhotoRequestBody
   */
  fileName: string;
  /**
   *
   * @type {string}
   * @memberof PhotoRequestBody
   */
  filePath: string;
  /**
   *
   * @type {string}
   * @memberof PhotoRequestBody
   */
  isFavorite?: string;
}
/**
 *
 * @export
 * @interface PostPhotoReturn
 */
export interface PostPhotoReturn {
  /**
   *
   * @type {string}
   * @memberof PostPhotoReturn
   */
  status: string;
  /**
   *
   * @type {string}
   * @memberof PostPhotoReturn
   */
  message: string;
  /**
   *
   * @type {number}
   * @memberof PostPhotoReturn
   */
  photoId?: number;
}
/**
 *
 * @export
 * @interface PostTravelReturn
 */
export interface PostTravelReturn {
  /**
   *
   * @type {string}
   * @memberof PostTravelReturn
   */
  status: string;
  /**
   *
   * @type {string}
   * @memberof PostTravelReturn
   */
  message: string;
  /**
   *
   * @type {number}
   * @memberof PostTravelReturn
   */
  travelId?: number;
}
/**
 *
 * @export
 * @interface TravelData
 */
export interface TravelData {
  /**
   *
   * @type {string}
   * @memberof TravelData
   */
  status: string;
  /**
   *
   * @type {string}
   * @memberof TravelData
   */
  message: string;
  /**
   *
   * @type {number}
   * @memberof TravelData
   */
  travelId?: number;
  /**
   *
   * @type {number}
   * @memberof TravelData
   */
  userId?: number;
  /**
   *
   * @type {number}
   * @memberof TravelData
   */
  travelRecordId?: number;
}
/**
 *
 * @export
 * @interface TravelDataRequestBody
 */
export interface TravelDataRequestBody {
  /**
   *
   * @type {string}
   * @memberof TravelDataRequestBody
   */
  userName: string;
  /**
   *
   * @type {string}
   * @memberof TravelDataRequestBody
   */
  title: string;
  /**
   *
   * @type {number}
   * @memberof TravelDataRequestBody
   */
  startDate: number;
  /**
   *
   * @type {number}
   * @memberof TravelDataRequestBody
   */
  endDate: number;
}
/**
 *
 * @export
 * @interface TravelRecordRequestBody
 */
export interface TravelRecordRequestBody {
  /**
   *
   * @type {string}
   * @memberof TravelRecordRequestBody
   */
  userName: string;
  /**
   *
   * @type {string}
   * @memberof TravelRecordRequestBody
   */
  title?: string;
  /**
   *
   * @type {number}
   * @memberof TravelRecordRequestBody
   */
  startDate?: number;
  /**
   *
   * @type {number}
   * @memberof TravelRecordRequestBody
   */
  endDate?: number;
}
/**
 *
 * @export
 * @interface UserData
 */
export interface UserData {
  /**
   *
   * @type {string}
   * @memberof UserData
   */
  status: string;
  /**
   *
   * @type {string}
   * @memberof UserData
   */
  message: string;
  /**
   *
   * @type {number}
   * @memberof UserData
   */
  userId?: number;
  /**
   *
   * @type {string}
   * @memberof UserData
   */
  userName?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary photoの登録
     * @param {PhotoRequestBody} [photoRequestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    photoPost: async (
      photoRequestBody?: PhotoRequestBody,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/photo`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        photoRequestBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary travelの削除
     * @param {TravelDataRequestBody} [travelDataRequestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    travelDelete: async (
      travelDataRequestBody?: TravelDataRequestBody,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/travel`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        travelDataRequestBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary travelの登録
     * @param {TravelDataRequestBody} [travelDataRequestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    travelPost: async (
      travelDataRequestBody?: TravelDataRequestBody,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/travel`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        travelDataRequestBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary travelRecordの削除
     * @param {TravelDataRequestBody} [travelDataRequestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    travelRecordDelete: async (
      travelDataRequestBody?: TravelDataRequestBody,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/travelRecord`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        travelDataRequestBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary travelRecordの登録
     * @param {TravelRecordRequestBody} [travelRecordRequestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    travelRecordPost: async (
      travelRecordRequestBody?: TravelRecordRequestBody,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/travelRecord`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        travelRecordRequestBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary travelRecordIdを元にしたTravelRecordの削除
     * @param {string} travelRecordId Generated path parameter for travelRecordId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    travelRecordTravelRecordIdDelete: async (
      travelRecordId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'travelRecordId' is not null or undefined
      assertParamExists(
        "travelRecordTravelRecordIdDelete",
        "travelRecordId",
        travelRecordId
      );
      const localVarPath = `/travelRecord/{travelRecordId}`.replace(
        `{${"travelRecordId"}}`,
        encodeURIComponent(String(travelRecordId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary travelIdを元にしたtravelの削除
     * @param {string} travelId Generated path parameter for travelId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    travelTravelIdDelete: async (
      travelId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'travelId' is not null or undefined
      assertParamExists("travelTravelIdDelete", "travelId", travelId);
      const localVarPath = `/travel/{travelId}`.replace(
        `{${"travelId"}}`,
        encodeURIComponent(String(travelId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary travelIdを元にしたtravelの取得
     * @param {string} travelId Generated path parameter for travelId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    travelTravelIdGet: async (
      travelId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'travelId' is not null or undefined
      assertParamExists("travelTravelIdGet", "travelId", travelId);
      const localVarPath = `/travel/{travelId}`.replace(
        `{${"travelId"}}`,
        encodeURIComponent(String(travelId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary userの削除
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userDelete: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/user`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary userの登録
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userPost: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/user`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary userの削除
     * @param {string} userId Generated path parameter for userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userUserIdDelete: async (
      userId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("userUserIdDelete", "userId", userId);
      const localVarPath = `/user/{userId}`.replace(
        `{${"userId"}}`,
        encodeURIComponent(String(userId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary userIdを元にしたuserの取得
     * @param {string} userId Generated path parameter for userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userUserIdGet: async (
      userId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("userUserIdGet", "userId", userId);
      const localVarPath = `/user/{userId}`.replace(
        `{${"userId"}}`,
        encodeURIComponent(String(userId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary photoの登録
     * @param {PhotoRequestBody} [photoRequestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async photoPost(
      photoRequestBody?: PhotoRequestBody,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<PostPhotoReturn>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.photoPost(
        photoRequestBody,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary travelの削除
     * @param {TravelDataRequestBody} [travelDataRequestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async travelDelete(
      travelDataRequestBody?: TravelDataRequestBody,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<DeleteTravelReturn>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.travelDelete(
        travelDataRequestBody,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary travelの登録
     * @param {TravelDataRequestBody} [travelDataRequestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async travelPost(
      travelDataRequestBody?: TravelDataRequestBody,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<PostTravelReturn>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.travelPost(
        travelDataRequestBody,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary travelRecordの削除
     * @param {TravelDataRequestBody} [travelDataRequestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async travelRecordDelete(
      travelDataRequestBody?: TravelDataRequestBody,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<DeleteTravelRecordReturn>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.travelRecordDelete(
          travelDataRequestBody,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary travelRecordの登録
     * @param {TravelRecordRequestBody} [travelRecordRequestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async travelRecordPost(
      travelRecordRequestBody?: TravelRecordRequestBody,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<CreateTravelRecordReturn>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.travelRecordPost(
          travelRecordRequestBody,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary travelRecordIdを元にしたTravelRecordの削除
     * @param {string} travelRecordId Generated path parameter for travelRecordId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async travelRecordTravelRecordIdDelete(
      travelRecordId: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<DeleteTravelRecordReturn>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.travelRecordTravelRecordIdDelete(
          travelRecordId,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary travelIdを元にしたtravelの削除
     * @param {string} travelId Generated path parameter for travelId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async travelTravelIdDelete(
      travelId: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<DeleteTravelReturn>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.travelTravelIdDelete(travelId, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary travelIdを元にしたtravelの取得
     * @param {string} travelId Generated path parameter for travelId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async travelTravelIdGet(
      travelId: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<TravelData>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.travelTravelIdGet(travelId, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary userの削除
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userDelete(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<DeleteUserReturn>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userDelete(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary userの登録
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userPost(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<CreateUserReturn>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userPost(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary userの削除
     * @param {string} userId Generated path parameter for userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userUserIdDelete(
      userId: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<DeleteUserReturn>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.userUserIdDelete(userId, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary userIdを元にしたuserの取得
     * @param {string} userId Generated path parameter for userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userUserIdGet(
      userId: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<UserData>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userUserIdGet(
        userId,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = DefaultApiFp(configuration);
  return {
    /**
     *
     * @summary photoの登録
     * @param {PhotoRequestBody} [photoRequestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    photoPost(
      photoRequestBody?: PhotoRequestBody,
      options?: any
    ): AxiosPromise<Array<PostPhotoReturn>> {
      return localVarFp
        .photoPost(photoRequestBody, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary travelの削除
     * @param {TravelDataRequestBody} [travelDataRequestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    travelDelete(
      travelDataRequestBody?: TravelDataRequestBody,
      options?: any
    ): AxiosPromise<Array<DeleteTravelReturn>> {
      return localVarFp
        .travelDelete(travelDataRequestBody, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary travelの登録
     * @param {TravelDataRequestBody} [travelDataRequestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    travelPost(
      travelDataRequestBody?: TravelDataRequestBody,
      options?: any
    ): AxiosPromise<Array<PostTravelReturn>> {
      return localVarFp
        .travelPost(travelDataRequestBody, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary travelRecordの削除
     * @param {TravelDataRequestBody} [travelDataRequestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    travelRecordDelete(
      travelDataRequestBody?: TravelDataRequestBody,
      options?: any
    ): AxiosPromise<Array<DeleteTravelRecordReturn>> {
      return localVarFp
        .travelRecordDelete(travelDataRequestBody, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary travelRecordの登録
     * @param {TravelRecordRequestBody} [travelRecordRequestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    travelRecordPost(
      travelRecordRequestBody?: TravelRecordRequestBody,
      options?: any
    ): AxiosPromise<Array<CreateTravelRecordReturn>> {
      return localVarFp
        .travelRecordPost(travelRecordRequestBody, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary travelRecordIdを元にしたTravelRecordの削除
     * @param {string} travelRecordId Generated path parameter for travelRecordId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    travelRecordTravelRecordIdDelete(
      travelRecordId: string,
      options?: any
    ): AxiosPromise<Array<DeleteTravelRecordReturn>> {
      return localVarFp
        .travelRecordTravelRecordIdDelete(travelRecordId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary travelIdを元にしたtravelの削除
     * @param {string} travelId Generated path parameter for travelId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    travelTravelIdDelete(
      travelId: string,
      options?: any
    ): AxiosPromise<Array<DeleteTravelReturn>> {
      return localVarFp
        .travelTravelIdDelete(travelId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary travelIdを元にしたtravelの取得
     * @param {string} travelId Generated path parameter for travelId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    travelTravelIdGet(
      travelId: string,
      options?: any
    ): AxiosPromise<Array<TravelData>> {
      return localVarFp
        .travelTravelIdGet(travelId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary userの削除
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userDelete(options?: any): AxiosPromise<Array<DeleteUserReturn>> {
      return localVarFp
        .userDelete(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary userの登録
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userPost(options?: any): AxiosPromise<Array<CreateUserReturn>> {
      return localVarFp
        .userPost(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary userの削除
     * @param {string} userId Generated path parameter for userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userUserIdDelete(
      userId: string,
      options?: any
    ): AxiosPromise<Array<DeleteUserReturn>> {
      return localVarFp
        .userUserIdDelete(userId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary userIdを元にしたuserの取得
     * @param {string} userId Generated path parameter for userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userUserIdGet(
      userId: string,
      options?: any
    ): AxiosPromise<Array<UserData>> {
      return localVarFp
        .userUserIdGet(userId, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   *
   * @summary photoの登録
   * @param {PhotoRequestBody} [photoRequestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public photoPost(
    photoRequestBody?: PhotoRequestBody,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .photoPost(photoRequestBody, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary travelの削除
   * @param {TravelDataRequestBody} [travelDataRequestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public travelDelete(
    travelDataRequestBody?: TravelDataRequestBody,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .travelDelete(travelDataRequestBody, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary travelの登録
   * @param {TravelDataRequestBody} [travelDataRequestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public travelPost(
    travelDataRequestBody?: TravelDataRequestBody,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .travelPost(travelDataRequestBody, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary travelRecordの削除
   * @param {TravelDataRequestBody} [travelDataRequestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public travelRecordDelete(
    travelDataRequestBody?: TravelDataRequestBody,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .travelRecordDelete(travelDataRequestBody, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary travelRecordの登録
   * @param {TravelRecordRequestBody} [travelRecordRequestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public travelRecordPost(
    travelRecordRequestBody?: TravelRecordRequestBody,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .travelRecordPost(travelRecordRequestBody, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary travelRecordIdを元にしたTravelRecordの削除
   * @param {string} travelRecordId Generated path parameter for travelRecordId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public travelRecordTravelRecordIdDelete(
    travelRecordId: string,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .travelRecordTravelRecordIdDelete(travelRecordId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary travelIdを元にしたtravelの削除
   * @param {string} travelId Generated path parameter for travelId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public travelTravelIdDelete(travelId: string, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .travelTravelIdDelete(travelId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary travelIdを元にしたtravelの取得
   * @param {string} travelId Generated path parameter for travelId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public travelTravelIdGet(travelId: string, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .travelTravelIdGet(travelId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary userの削除
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public userDelete(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .userDelete(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary userの登録
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public userPost(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .userPost(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary userの削除
   * @param {string} userId Generated path parameter for userId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public userUserIdDelete(userId: string, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .userUserIdDelete(userId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary userIdを元にしたuserの取得
   * @param {string} userId Generated path parameter for userId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public userUserIdGet(userId: string, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .userUserIdGet(userId, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
